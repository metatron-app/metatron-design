# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, metatron team
# This file is distributed under the same license as the metatron discovery
# docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: metatron discovery docs 0.4.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-02-28 13:54+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../part01/engine.rst:2
msgid "메타트론 엔진"
msgstr "Metatron Engine"

#: ../../part01/index.rst:2
msgid "메타트론 디스커버리 소개"
msgstr ""

#: ../../part01/metatron_engine.rst:2
msgid "메타트론 엔진이란?"
msgstr ""

#: ../../part01/metatron_engine.rst:4
msgid ""
"근래에 들어 정보통신 기술의 발전과 함께 데이터 발생량이 비약적으로 증가하였고, 이를 효율적으로 수집·관리·활용하는 것의 중요성이 "
"대두되고 있다. 하지만 RDBMS 위주의 레거시 시스템들로는 대용량의 다차원 데이터를 온전히 처리할 수가 없기 때문에 차세대 "
"빅데이터 수요를 충족시키기 위한 새로운 방법론과 솔루션들이 대거 등장하기 시작하였다."
msgstr ""

#: ../../part01/metatron_engine.rst:6
msgid ""
"미국 실리콘 밸리에 소재한 스타트업 Metamarkets사에서는 2011년 Druid라는 컬럼 기반 분산형 데이터 스토어를 "
"출시하였고 2012년 10월 이를 오픈소스로 전환하였는데, 빠르고 효율적인 데이터 처리를 비롯한 여러 장점 때문에 많은 기업에서 "
"Druid를 backend 기술로 활용하고 있다. 이러한 흐름에서 SK텔레콤도 B2C 이동통신 서비스 제공업체로서 매순간 "
"이용자들로부터 발생하는 엄청난 양의 네트워크 데이터를 효과적으로 관리·분석할 필요가 있었으며, 2016년 Druid를 기본 엔진으로"
" 활용한 end-to-end 비즈니스 인텔리전스 솔루션 metatron을 개발·출시하였다."
msgstr ""

#: ../../part01/metatron_engine.rst:10
msgid "Druid 개발 배경"
msgstr ""

#: ../../part01/metatron_engine.rst:12
msgid ""
"Druid는 대량의 트랜잭션 이벤트(로그 데이터)를 ingestion하고 탐색할 수 있도록 지원하는 엔진으로서 다음과 같은 니즈를 "
"충족하기 위해 개발되었다."
msgstr ""

#: ../../part01/metatron_engine.rst:14
msgid ""
"첫째, 개발자들은 어떠한 차원들의 조합에 대한 쿼리라도 즉각적으로 결과가 반환되며, 데이터를 신속히 임의로 slice 및 "
"dice하고 이를 아무 제약 없이 효과적으로 drill down하는 기능을 구현하고자 했다. 이러한 기능들은 사용자들이 데이터 "
"대시보드에서 이벤트 스트림들을 interactive한 방식으로 자유롭게 탐색하고 시각화하는 데 필요하였다."
msgstr ""

#: ../../part01/metatron_engine.rst:16
msgid ""
"둘째, 개발자들은 이벤트들이 발생하는 즉시 해당 데이터를 ingestion하여 쿼리 가능하도록 인덱싱하는 기능을 원했다. 이러한 "
"기능은 사용자들이 데이터를 실시간으로 수집·분석함으로써 시의적절하게 상황을 판단·예측하고 비즈니스 의사 결정을 내릴 수 있도록 하는"
" 데 반드시 필요했다. 당시에 Hadoop 등의 유명한 오픈소스 데이터 웨어하우스 시스템들은 sub-second 데이터 "
"ingestion이 불가능했다."
msgstr ""

#: ../../part01/metatron_engine.rst:18
msgid ""
"마지막으로, 개발자들은 multitenancy와 high availability를 보장하고자 했다. 이들이 제공하는 서비스의 기반 "
"시스템은 많은 사용자들의 동시 접속을 보장하고, 항상 가동 상태를 유지하며 downtime 없이 모든 고장에 견딜 수 있어야 했다."
" downtime의 존재는 비용을 발생시키며, 소프트웨어 업그레이드나 네트워크 장애 발생 시 사용할 수 없는 시스템으로는 많은 "
"기업의 비즈니스가 불가능하다."
msgstr ""

#: ../../part01/metatron_engine.rst:23
msgid "오픈소스 Druid 특징"
msgstr ""

#: ../../part01/metatron_engine.rst:26
msgid "데이터 테이블 형태"
msgstr ""

#: ../../part01/metatron_engine.rst:28
msgid ""
"Druid의 데이터 테이블(Druid에서는 ‘데이터 소스’라고 함)은 OLAP 쿼리용으로 설계된 시계열 이벤트들로 구성된다. 데이터"
" 소스는 세 종류의 컬럼으로 구성된다(여기서는 온라인 광고 데이터를 예시로 사용)."
msgstr ""

#: ../../part01/metatron_engine.rst:30
msgid ""
"**타임스탬프 컬럼**: Druid는 데이터 소스에서 타임스탬프 컬럼을 별도로 구성함으로써 모든 쿼리가 시간 축을 중심으로 "
"이루어지게 한다. (시계열 속성이 없는 데이터를 일괄적으로 ingestion할 경우에는 현재 시간을 기준으로 타임스탬프가 부여되어 "
"Druid에서 활용할 수 있는 형태가 된다.)"
msgstr ""

#: ../../part01/metatron_engine.rst:31
msgid ""
"**차원 컬럼**: 차원 컬럼은 각 이벤트의 문자열 속성들을 담고 있으며, 데이터 필터링 시 가장 흔히 사용된다. 위 데이터셋 "
"예시에서는 publisher, advertiser, gender, country가 차원 컬럼이다. 데이터 탐색 시에는 이러한 차원 "
"컬럼들을 축으로 하여 데이터를 slice하게 된다."
msgstr ""

#: ../../part01/metatron_engine.rst:32
msgid ""
"**측정값 컬럼**: 측정값 컬럼들은 집계 및 연산에 사용된다. 위 예에서는 clicks 및 price가 측정값 컬럼이다. 측정값 "
"컬럼의 자료형은 대체로 수치 값이며, 이들은 계수, 합산, 평균 등의 방식으로 집계할 수 있다(metatron에서는 지원되는 "
"자료형을 증대하였다)."
msgstr ""

#: ../../part01/metatron_engine.rst:36
msgid "데이터 ingestion"
msgstr ""

#: ../../part01/metatron_engine.rst:38
msgid ""
"Druid는 실시간 및 일괄(batch) ingestion을 지원한다. 이 중에서 실시간 ingestion은 Druid의 주요 특징"
" 중 하나인데, 이를 전담하는 real-time 노드군이 있기 때문에 가능한 것이다(자세한 설명은 3.7.1절 ‘Real-time "
"노드’ 참조). 실시간으로 ingestion되는 데이터 스트림 내 이벤트들은 발생 후 수 초 이내에 Druid 클러스터에서 쿼리가 "
"가능한 포맷으로 인덱싱된다."
msgstr ""

#: ../../part01/metatron_engine.rst:42
msgid "데이터 roll-up"
msgstr ""

#: ../../part01/metatron_engine.rst:44
msgid ""
"무수히 많은 개별 이벤트를 단순히 열거하기만 해서는 중요한 의미를 찾을 수 없다. 하지만 이러한 데이터를 적절한 시간대를 기준으로 "
"취합하면 유용한 인사이트를 얻을 수 있다. Druid는 roll-up이라는 옵션을 통해 ingestion되는 원천 데이터를 취합할 "
"수 있다. 아래는 roll-up의 예시를 나타낸 것이다."
msgstr ""

#: ../../part01/metatron_engine.rst:46
msgid ""
"왼쪽의 원본 이벤트 목록은 2011년 1월 1일 00:00:00~01:00:00 사이에 발생한 도메인 클릭 이벤트를 열거한 것이다."
" 하지만 분석가 입장에서는 분 이하 단위의 개별 이벤트가 별다른 의미를 갖지 못하기 때문에 1시간의 granularity를 기준으로"
" 데이터를 취합했다. 그 결과 오른쪽 테이블에 나타난 것처럼 2011년 1월 1일 00~01시 시간대에 각 도메인을 남성과 여성이 "
"각각 클릭한 횟수를 보여주는 보다 의미 있는 결과물이 도출되었다. 또한 데이터 roll-up은 원천 데이터의 저장 용량을 "
"최소함으로써(많게는 100배까지도 축소 가능), 스토리지 리소스를 절약하고 쿼리 속도를 빠르게 한다. 그러나 데이터를 roll-"
"up하면 개별 이벤트들에 대해 쿼리할 수 없게 된다. roll-up granularity는 데이터를 탐색할 수 있는 최소 단위가 "
"되며 이벤트들은 이러한 granularity 단위로 배열된다. granularity 단위는 사용자가 원하는 대로 설정할 수 있으며,"
" 원치 않으면 roll-up을 비활성화하고 모든 개별 이벤트를 전부 ingestion할 수도 있다."
msgstr ""

#: ../../part01/metatron_engine.rst:52
msgid "데이터 sharding"
msgstr ""

#: ../../part01/metatron_engine.rst:54
msgid ""
"데이터 소스는 시계열 이벤트들의 집합으로서 여러 shard로 분할 저장되는데, Druid에서는 이를 ‘세그먼트’라고 부르며 각 "
"세그먼트는 대개 500~1,000만 행으로 이루어진다. Druid는 데이터 소스들을 정의된 시간 간격(통상적으로 1시간이나 하루)을"
" 기준으로 분할하며, 그 밖의 컬럼에 있는 값들을 기준으로 추가 분할을 실시함으로써 세그먼트 크기를 적절하게 맞출 수 있다. 아래는"
" 1시간 단위로 분할된 데이터 테이블을 예시로 나타낸 것이다."
msgstr ""

#: ../../part01/metatron_engine.rst:57
msgid ""
"이와 같이 시간 단위로 세그먼트를 구분하는 것은 데이터 소스 내의 모든 이벤트에 타임스탬프가 포함되기 때문에 가능하다. 세그먼트는 "
"Druid 테이블의 기본 저장 단위에 해당하며, 클러스터 내 데이터의 복제(replication) 및 분산은 세그먼트 단위로 "
"이루어진다. 세그먼트 내 데이터는 변경할 수 없도록 되어 있다. 이렇게 함으로써 읽기와 쓰기 동작 사이에 경합이 발생하지 않게 "
"된다. Druid의 세그먼트는 매우 신속하게 읽히기 위한 읽기 전용 데이터셋이다. 뿐만 아니라, 이러한 데이터 세그먼트 분할은 "
"Druid 분산 환경에서의 병렬 처리를 위한 핵심 역할을 한다. 각 CPU가 한 번에 하나의 세그먼트를 스캔할 수 있기 때문에 "
"데이터를 여러 세그먼트로 분할하면 이를 여러 CPU가 동시에 병렬적으로 스캔할 수 있으므로, 쿼리 결과를 신속하게 반환하고 부하를 "
"안정적으로 분산시킬 수 있게 된다."
msgstr ""

#: ../../part01/metatron_engine.rst:64
msgid "데이터 저장 포맷 및 인덱싱"
msgstr ""

#: ../../part01/metatron_engine.rst:66
msgid ""
"Druid의 데이터 구조를 분석 쿼리에 최적화시키는 주요 요소 중 하나는 Druid가 데이터를 저장하는 방식이다. 본 절에서는 "
"설명을 위해 아래의 Druid 테이블 예시를 사용한다."
msgstr ""

#: ../../part01/metatron_engine.rst:69
msgid "**1. 컬럼 기반 저장 및 인덱싱**"
msgstr ""

#: ../../part01/metatron_engine.rst:71
msgid ""
"Druid는 컬럼들을 각각 따로 저장한다. Druid가 주로 이벤트 스트림을 집계하는 데 사용된다는 점을 고려할 때, 이러한 컬럼 "
"기반 저장 방식을 취하면 각 쿼리에 관련된 컬럼만을 로드·스캔하므로 CPU 리소스를 보다 효율적으로 사용할 수 있다. 행 기반 "
"데이터 스토어에서는 집계 시 대상 행과 관련된 모든 컬럼을 컬럼별로 상이한 방식으로 압축할 수 있으며 그에 따라 각기 다른 인덱스를"
" 활용함으로써 컬럼을 메모리나 디스크에 저장하는 데 드는 리소스 비용을 줄일 수 있다. 위 예에서 page, user, "
"gender, city 컬럼은 문자열만을 포함한다. 직접 문자열들을 저장하는 것은 불필요한 비용을 발생시키므로 이들을 고유한 정수 "
"식별자로 매핑할 수 있다."
msgstr ""

#: ../../part01/metatron_engine.rst:73
msgid "Example: ::"
msgstr ""

#: ../../part01/metatron_engine.rst:78
msgid ""
"이 매핑을 사용하면 page 컬럼을 정수 배열로 나타낼 수 있는데, 여기서 배열 인덱스 각각은 원본 데이터셋의 각 행에 해당한다. "
"page 컬럼의 경우, 각 행의 page 값을 아래와 같이 표시할 수 있다. ::"
msgstr ""

#: ../../part01/metatron_engine.rst:82
msgid ""
"이처럼 문자열들이 고정 길이 정수들로 바뀌어 저장되므로 압축하기가 훨씬 더 수월하다. Druid는 각 shard(세그먼트) 단위로 "
"데이터를 인덱싱한다."
msgstr ""

#: ../../part01/metatron_engine.rst:85
msgid "**2. 데이터 필터링을 위한 인덱싱**"
msgstr ""

#: ../../part01/metatron_engine.rst:87
msgid ""
"Druid는 검색 인덱스를 추가로 만들어서 문자열 컬럼에 대한 필터링을 용이하게 할 수 있다. 위 예시 테이블을 다시 보자. 가령 "
"“샌프란시스코에 사는 남성 사용자들이 Wikipedia 편집을 한 횟수는?”과 같은 쿼리가 있을 수 있다. 이 쿼리 예시에는 "
"도시(San Francisco)와 성별(Male)이라는 두 가지 차원이 포함된다. 각 차원별로 아래와 같은 바이너리 배열이 "
"생성되는데, 여기서 배열 인덱스 각각은 해당 행이 쿼리 필터 조건에 부합하는지 여부를 나타낸다. ::"
msgstr ""

#: ../../part01/metatron_engine.rst:92
msgid "그런 다음 쿼리 필터는 이러한 두 배열에 대해 AND 연산을 실시한다. ::"
msgstr ""

#: ../../part01/metatron_engine.rst:96
msgid ""
"그 결과, 행 1만 스캔 대상이 된다. 이런 식으로 필터링된 행만 검색함으로써 불필요한 부하를 방지하는 것이다. 이러한 바이너리 "
"배열은 압축하기도 매우 쉽다. 이러한 검색 인덱싱은 OR 연산에도 사용할 수 있다. 어떤 쿼리가 San Francisco 또는 "
"Calgary을 필터링하는 경우, 배열 인덱스들은 차원값별로 다음과 같을 것이다. ::"
msgstr ""

#: ../../part01/metatron_engine.rst:101
msgid "그런 다음 두 배열에 대해 OR 연산이 수행된다. ::"
msgstr ""

#: ../../part01/metatron_engine.rst:105
msgid ""
"그 결과, 쿼리는 행 1과 3만 스캔한다. 대형 비트맵 셋에 boolean 연산을 실시하는 이러한 접근방식은 검색 엔진에서 널리 "
"사용된다."
msgstr ""

#: ../../part01/metatron_engine.rst:111
msgid "쿼리 언어"
msgstr ""

#: ../../part01/metatron_engine.rst:113
msgid "Druid의 네이티브 쿼리 언어는 JSON over HTTP이며, 주요 쿼리는 다음과 같다."
msgstr ""

#: ../../part01/metatron_engine.rst:115
msgid "Group By"
msgstr ""

#: ../../part01/metatron_engine.rst:116
msgid "시계열 기반 roll-up"
msgstr ""

#: ../../part01/metatron_engine.rst:117
msgid "임의적 boolean 필터링"
msgstr ""

#: ../../part01/metatron_engine.rst:118
msgid "Sum, Min, Max, Avg 등의 집계 연산"
msgstr ""

#: ../../part01/metatron_engine.rst:119
msgid "차원값 검색"
msgstr ""

#: ../../part01/metatron_engine.rst:121
msgid "하지만 이 외에도 SQL을 비롯한 다양한 언어로 이루어진 쿼리 라이브러리가 생성·공유되고있다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:2
msgid "메타트론 엔진 노드"
msgstr ""

#: ../../part01/metatron_engine_node.rst:4
msgid "Druid 클러스터는 여러 유형의 노드군으로 구성되며, 각 유형의 노드군별로 고유의 역할을 수행한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:12
msgid "Real-time 노드"
msgstr ""

#: ../../part01/metatron_engine_node.rst:14
msgid ""
"real-time 노드군은 이벤트 스트림을 ingestion하고 쿼리하는 기능을 한다. 이 노드들은 최근 발생한 짧은 시간 범위 내"
" 이벤트들만을 처리하며, 주기적으로 이들을 딥 스토리지로 넘기는데, 그 절차는 다음과 같다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:16
msgid "유입되는 이벤트들은 메모리에 인덱싱되면서 즉시 쿼리에 사용될 수 있다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:17
msgid "메모리 상의 데이터는 정기적으로 디스크에 저장되면서 수정 불가능한(읽기 전용) 컬럼형 포맷으로 변환된다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:18
msgid "저장된 데이터는 off-heap 메모리로 로드되기 때문에 쿼리 가능한 상태가 유지된다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:19
msgid "디스크에 저장된 인덱스들을 주기적으로 병합되어 데이터 ‘세그먼트’를 구성한 후 딥 스토리지로 이관된다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:21
msgid ""
"이런 식으로 real-time 노드로 ingestion된 모든 이벤트는 디스크 저장 전후를 막론하고 on-heap 또는 off-"
"heap 메모리 상에 존재하므로 쿼리가 가능한 상태를 유지한다(쿼리는 메모리 상의 인덱스와 디스크에 저장된 인덱스 모두에 "
"전달된다). 이러한 real-time 노드 기능을 통해 Druid는 실시간 데이터 ingestion을 수행할 수 있다. 즉, "
"이벤트들이 발생하면 곧 이어서 쿼리 대상이 된다. 그리고 이러한 과정에서 데이터 손실이 발생하지 않는다. real-time 노드는 "
"Druid 클러스터 내 다른 노드들과의 유기적인 동작을 위해 자신의 온라인 상태와 처리 중인 데이터를 Zookeeper(Druid "
"클러스터의 외부 종속 모듈, 3.7.5절 참조)에 보고한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:26
msgid "Historical 노드"
msgstr ""

#: ../../part01/metatron_engine_node.rst:28
msgid ""
"historical 노드군은 real-time 노드가 생성한 읽기 전용 데이터 블록(세그먼트)을 로드하고 처리하는 기능을 한다. 이"
" 노드들은 딥 스토리지에서 읽기 전용 세그먼트를 다운로드하고 이에 대한 쿼리를 처리한다(예: 데이터 집계/필터링). 이 노드들은 "
"shared-nothing 아키텍쳐에 기반하며 동작이 단순하다. 이들 간에는 경합이 발생하지 않으며 단순히 Zookeeper의 "
"지시에 따라 세그먼트를 로드, 드롭, 처리할 뿐이다. historical 노드가 쿼리를 처리하는 프로세스는 다음과 같다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:30
msgid ""
"쿼리를 받으면 historical 노드는 우선 자신에게 이미 어떤 세그먼트가 존재하는지에 관한 정보를 보관하는 로컬 캐시를 "
"확인한다. 어떤 세그먼트에 관한 정보가 캐시에 없으면 노드는 딥 스토리지에서 해당 세그먼트를 다운로드한다. 그런 다음, 해당 "
"세그먼트는 Zookeeper에서 선언되어 쿼리가 가능한 대상이 되며, 노드는 이 세그먼트에 대해 요청된 쿼리를 수행한다. "
"historical 노드는 읽기 전용 데이터만을 다루므로 read consistency를 보장할 수 있다. 읽기 전용 데이터 "
"블록들은 또한 단순한 병렬 모델을 가능케 한다. 즉, historical 노드들은 읽기 전용 데이터 블록들을 서로 간섭하지 않고 "
"동시에 스캔·집계할 수 있다. real-time 노드와 마찬가지로 historical 노드들도 자신들의 온라인 상태와 처리 중인 "
"데이터를 Zookeeper에 보고한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:36
msgid "Broker 노드"
msgstr ""

#: ../../part01/metatron_engine_node.rst:38
msgid ""
"broker 노드군은 Zookeeper에 보고된 메타데이터를 통해 어떤 세그먼트들이 쿼리 가능한지와 이 세그먼트들이 각각 어디에 "
"저장되어 있는지를 파악한다. broker 노드들은 입력된 쿼리들의 경로를 지정함으로써 각 쿼리가 올바른 historical 또는 "
"real-time 노드에 도달되게끔 한다. 그런 다음 historical 및 real-time 노드 각각에서 산출된 결과들을 "
"취합하여 최종 쿼리 결과를 호출자에게 반환한다. broker 노드는 리소스 효율성을 높이기 위해 다음과 같이 캐시를 사용한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:41
msgid ""
"어떤 쿼리가 여러 세그먼트를 포괄할 경우 broker 노드는 캐시에 이미 존재하는 세그먼트들을 우선 확인한다. 그리고 캐시에 없는 "
"세그먼트들에 대해서는 그것이 보관된 historical 및 real-time 노드로 쿼리를 전달한다. historical 노드들이 "
"결과를 반환하면, broker 노드는 이 결과를 나중에 사용할 수 있도록 세그먼트별로 캐시에 저장한다. real-time 노드의 "
"데이터는 캐시에 저장되지 않으며, 따라서 real-time 데이터에 대한 요청은 항상 real-time 노드로 전달된다. real-"
"time 노드의 데이터는 가변적이기 때문에 그 결과를 캐시에 저장하는 것은 안정적이지 않기 때문이다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:45
msgid "Coordinator 노드"
msgstr ""

#: ../../part01/metatron_engine_node.rst:47
msgid ""
"coordinator 노드군은 주로 historical 노드 데이터의 관리 및 분산을 담당한다. coordinator 노드는 어떤 "
"historical 노드가 어떤 세그먼트에 대해 쿼리를 수행할지 결정하고 이들에게 새 데이터를 로드하고, 기한이 지난 데이터를 "
"드롭하고, 데이터를 복제하고, 데이터를 이동하여 부하 밸런스를 맞추도록 지시한다. 이렇게 함으로써 분산형 historical 노드 "
"그룹에서 빠르고 효율적이며 안정으로 데이터를 처리할 수 있다. 다른 모든 Druid 노드와 마찬가지로, coordinator "
"노드들도 Zookeeper 연결을 유지함으로써 클러스터의 현황을 파악한다. coordinator 노드들은 MySQL 데이터베이스와의"
" 연결도 유지하는데, 이 데이터베이스에서는 클러스터 내 세그먼트의 생성, 소멸, 복제 규칙과 같은 추가적인 연산 매개변수 및 구성 "
"정보를 관리한다. Druid 클러스터의 안정성을 위해 coordinator 노드는 이중화되며 일반적으로 하나의 coordinator"
" 노드만 활성 상태를 유지한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:51
msgid "1. 외부 종속 모듈"
msgstr ""

#: ../../part01/metatron_engine_node.rst:53
msgid "Druid는 클러스터 동작을 위해 몇 가지 외부 종속 모듈을 사용한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:55
msgid "**Zookeeper**: Druid는 Zookeeper를 통해 클러스터 내부 통신을 한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:56
msgid ""
"**메타데이터 스토리지**: Druid는 메타데이터 스토리지를 통해 데이터 세그먼트 및 구성에 관한 메타데이터를 저장한다. "
"메타데이터 스토리지로는 주로 MySQL과 PostgreSQL이 사용된다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:57
msgid ""
"**딥 스토리지**: Druid 세그먼트들을 영구적으로 백업 저장하는 공간이다. Druid에 ingestion되는 데이터는 세그먼트"
" 형태로 딥 스토리지에 업로드되고, historical 노드들이 필요한 세그먼트를 여기서 다운로드한다. 딥 스토리지로는 주로 S3 "
"및 HDFS가 사용된다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:60
msgid "2. High Availability 특성"
msgstr ""

#: ../../part01/metatron_engine_node.rst:62
msgid ""
"Druid는 어느 한 노드가 고장난다고 해서 클러스터의 동작이 중단되지 않도록 설계되었다. 또한 서로 다른 유형의 노드군끼리도 상호"
" 간에 상당히 독립적이기 때문에, 클러스터 내부에 통신 장애가 생겨도 데이터 가용성에는 최소한의 영향을 미친다. Druid "
"클러스터에서 highly availability를 확보하려면, 노드군별로 2개 이상의 노드가 구성되어야 한다."
msgstr ""

#: ../../part01/metatron_engine_node.rst:65
msgid "3. 아키텍처 확장성"
msgstr ""

#: ../../part01/metatron_engine_node.rst:71
msgid ""
"Druid는 위에서 소개한 기본 아키텍처에 다양한 외부 모듈을 추가할 수 있는 모듈 확장형 플랫폼을 지향한다. 아래는 Druid의 "
"확장성을 활용한 모듈 조합의 예시이다. Metatron Discovery 엔진 또한 비즈니스 인텔리전스를 위한 end-to-end "
"솔루션으로서 기능하기 위해 Druid 엔진 전후단에 다양한 모듈을 추가한 것이다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:2
msgid "메타트론 엔진만의 강점"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:5
msgid "metatron 개발 배경과 Druid 기술의 도입"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:8
msgid "1. 빅데이터 분석 솔루션으로서 metatron의 니즈"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:9
msgid ""
"SK텔레콤은 국내 최대 가입자를 보유하고 있는 이동통신 서비스 제공업체로서, 수많은 이용자들로부터 발생되는 엄청난 양의 네트워크 "
"데이터 로그를 활용하여 안정적인 네트워크 환경을 구축하는데 많은 노력을 기울이고 있다. 기존의 IT 인프라로는 이런 대용량 데이터 "
"처리에 한계가 있기 때문에 SK텔레콤은 대규모 빅데이터 시스템(Apache Hadoop)과 이를 활용하기 위한 빅데이터 분석 "
"솔루션이 필요했다. SK텔레콤은 저비용으로 대용량 데이터의 저장하기 위해 대규모 Hadoop 인프라를 자체 구축하였지만 다음과 같은"
" 한계가 있었다. 첫째, 수많은 사용자의 네트워크 데이터를 실시간으로 분석할 수 없었다. 빅데이터의 저장/처리는 가능했지만 데이터를"
" 시각화하는 데는 한계가 있어 결국 과거와 같이 일부 필요한 데이터만 샘플링해서 확인해야 했다. 둘째, ETL, DW, BI 등 "
"데이터 분석 단계별로 각기 다른 솔루션, 각기 다른 담당자가 지원하는 기존의 방식은 데이터 분석을 하는 데 시간과 비용이 많이 들며"
" 데이터 접근성을 현저하게 떨어뜨렸다. 단순하면서도 신속하게 데이터를 분석할 수 있으려면 분석의 전 단계를 한꺼번에 처리할 수 있는"
" end-to-end 솔루션이 필요했다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:15
msgid "2. Druid를 엔진으로 채택한 이유"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:16
msgid ""
"Druid는 다음과 같은 특징들 때문에 위와 같은 니즈를 충족해야 하는 Metatron 솔루션의 엔진으로서 적합했다. 1. "
"Druid는 대용량의 데이터를 실시간으로 수집하여 즉시 쿼리 가능한 형태로 인덱싱하며s, 분산 처리 기반을 통해 대용량의 데이터 "
"집계를 아주 빠른 시간(최대 수초) 이내에 처리해준다. 2. Druid의 시계열 기반 OLAP Cube 데이터 포맷은 분석가가 "
"원하는 대로 탐색, 필터링, 시각화하기 용이하다. 실무자들이 쿼리 구성을 고민하지 않고 직관적으로 필요한 데이터를 선별하여 알고자 "
"하는 상관 관계를 바로 출력할 수 있게 하려면 이러한 탐색 자유도와 유연성이 필수적이다. 3. Druid는 확장성이 탁월하여 각종 "
"모듈을 추가하기 용이하다. Metatron은 Druid의 이러한 특성을 활용하여 데이터 수집, 저장, 처리, 분석, 시각화 등의 "
"모든 layer를 포괄하는 end-to-end 솔루션을 구축하였다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:23
msgid "3. Druid 응용 방식"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:24
msgid ""
"metatron에서 Druid 엔진을 응용하는 방식은 다음과 같다. 첫째, 사용자(현업/빅데이터 분석가) 측면에서 Druid를 기본"
" 처리/분석 엔진으로 사용하기 쉽도록 GUI 화면을 구성하여 데이터 전처리, 분석, 시각화 등 데이터 관련 업무를 수행하고 이를 "
"공유할 수 있게 하였다. 둘째, IT 운영자는 Druid 내 데이터 소스를 관리/모니터링 할 수 있고, 필요시 데이터 전처리 작업을"
" 통해 고품질의 데이터 소스를 제공할 수 있도록 지원한다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:30
msgid "metatron에서 보강한 Druid 기능들"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:31
msgid ""
"Druid는 강력한 데이터 수집·처리 기능을 지원하지만, metatron이 end-to-end 솔루션으로 온전히 기능하기 위해서는 "
"기존의 오픈소스 Druid를 개선할 필요가 있었다. 본 절에서는 기존 오픈소스 Druid의 한계와 Metatron에서 보강한 "
"기능들을 살펴본다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:34
msgid "오픈소스 Druid의 한계"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:36
msgid "기존의 오픈소스 Druid의 한계는 다음과 같다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:38
msgid ""
"Druid는 데이터 테이블 join에 제약이 많다. 이런 이유로 metatron은 데이터 전처리를 위해 다른 SQL 엔진으로 "
"사용한다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:39
msgid "Druid는 SQL 쿼리를 부분적으로만 지원한다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:40
msgid "데이터 레이크용으로는 기존의 SQL 엔진을 사용하는 편이 더 낫다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:41
msgid ""
"이미 인덱싱된 세그먼트를 수정하거나 행을 추가할 수 없다. 물론 incremental ingestion과 같은 특수한 상황에는 "
"가능하지만 일반적이지 않다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:42
msgid "null 값이 지원되지 않는다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:43
msgid "측정값에 대한 필터링이 지원되지 않는다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:44
msgid "Linear scalability가 보장되지 않는다. 서버의 수를 늘려도 성능이 크게 개선되지 않는다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:45
msgid "Druid에서 지원하는 자료형은 제한적이며 추가하기가 어렵다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:46
msgid "관리 및 모니터링 도구가 성능이 우수하지 않다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:50
msgid "Metatron에서 보강한 Druid 기능들"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:52
msgid "Metatron은 Druid에서 미비한 기능들을 다음과 같이 보강하였다."
msgstr ""

#: ../../part01/metatron_engine_strength.rst:54
msgid "**1. 쿼리 성능 개선**"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:56
msgid "groupBy 쿼리 성능 개선"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:57
msgid "기타 쿼리 성능 소폭 개선"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:59
msgid "**2. 기능 추가**"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:61
msgid "가상 컬럼(map, expression 등)"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:62
msgid "측정값 자료형 확장(double, string, array 등)"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:63
msgid "계산식 기능 확장"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:64
msgid "Druid 쿼리 결과를 HDFS 또는 파일로 내보낼 수 있음"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:65
msgid "데이터 테이블에 대한 메타 정보 및 통계용 쿼리 추가"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:66
msgid "집계 기능 추가(분산, 상관관계 등)"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:67
msgid "(제한적) 관계형 DB의 window 기능들 구현(lead, lar, running aggregations 등)"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:68
msgid "(제한적) join 기능 강화"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:69
msgid "(제한적) 서브 쿼리 추가"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:70
msgid "임시 데이터 소스"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:71
msgid "복합 쿼리 추가(데이터 소스 summarization, 데이터 소스 간 상관관계, k-평균 등)"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:72
msgid "사용자 정의 컬럼 grouping 지원"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:73
msgid "GIS(지도-GEO서버 연계 adaptor 제공) 기능 지원"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:74
msgid "컬럼별 histogram 제공"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:75
msgid "Bit-slice indexing 지원"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:77
msgid "**3. 인덱스 구조 개선**"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:79
msgid "측정값 필터링용 히스토그램"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:80
msgid "텍스트 필터링용 lucene 포맷 지원"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:83
msgid "**4. 다른 시스템들과의 연동 지원**"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:85
msgid "Hive 저장소 핸들러"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:86
msgid "Hive 테이블 ingestion(Hive 메타 스토어와 연결)"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:87
msgid "ORC 포맷 ingestion"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:88
msgid "JDBC를 통한 RDBMS 데이터 ingestion"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:89
msgid "(제한적) Backport된 SQL 지원"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:91
msgid "**5. 기타 개선사항**"
msgstr ""

#: ../../part01/metatron_engine_strength.rst:93
msgid "버그 수정(50건 이상), 기능 추가 및 기타 경미한 사항들 개선"
msgstr ""

#: ../../part01/metatron_engine_test.rst:2
msgid "메타트론 엔진의 성능 평가"
msgstr ""

#: ../../part01/metatron_engine_test.rst:4
msgid ""
"Druid는 ‘실시간’ 탐색이 가능한 데이터 스토어를 지향하는 만큼 수치화된 성능을 평가함에 있어서는 다음의 두 가지 측면에 초점이"
" 맞춰진다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:6
msgid "Query latency"
msgstr ""

#: ../../part01/metatron_engine_test.rst:7
msgid "Ingestion latency"
msgstr ""

#: ../../part01/metatron_engine_test.rst:9
msgid ""
"쿼리 처리와 ingestion에서 소요되는 시간을 최소화하는 것이 ‘실시간’을 이루는 핵심이 되기 때문이다. 지금까지 Druid "
"개발진을 비롯한 여러 기관 및 개인이 이러한 기준으로 Druid 성능을 평가한 benchmark들을 산출하고 그 밖의 지표를 통해 "
"Druid를 다른 데이터베이스 관리 시스템들과 비교한 결과를 공개하였다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:13
msgid "Druid 개발진의 자체 평가"
msgstr ""

#: ../../part01/metatron_engine_test.rst:15
msgid ""
"Druid 개발진이 2014년 발표한 백서 ‘Druid: A Real-time Analytical Data Store’2의 "
"Chapter 6. Performance에서는 Druid의 query 및 ingestion latency를 다방면에서 평가한 결과를"
" 상세하게 설명하고 있다. 본 절에서는 이 중에서 Druid의 성능을 직관적으로 살펴볼 수 있는 지표 위주로 간단히 소개한다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:18
msgid "Query latency 성능"
msgstr ""

#: ../../part01/metatron_engine_test.rst:19
msgid ""
"Druid의 query latency 성능에 대해 백서에서는 현장에서 실제 사용되는 데이터셋 8종과 TPC-H 데이터셋에 대한 쿼리"
" 결과를 기준으로 평가하였는데, 여기서는 TPC-H 데이터셋에 대한 쿼리 결과를 소개한다. TPC-H 데이터셋에 대한 query "
"latency는 MySQL과의 비교 평가 방식으로 진행하였고, 이때 사용한 클러스터 사양은 다음과 같았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:21
msgid ""
"**Druid historical 노드**: Amazon EC2 m3.2xlarge instance types (Intel® "
"Xeon® E5-2680 v2 @ 2.80GHz)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:22
msgid ""
"**Druid broker 노드**: c3.2xlarge instances (Intel® Xeon® E5-2670 v2 @ "
"2.50GHz)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:23
msgid "**MySQL Amazon RDS instance** (Druid와 동일한 m3.2xlarge instance type)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:25
msgid ""
"아래는 단일 노드에서의 1GB 및 100GB TPC-H 데이터셋에 대한 Druid와 MySQL의 query latency를 비교한 "
"결과를 정리한 그래프이다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:31
msgid ""
"이러한 결과는 Druid의 도입으로 기존 관계형 데이터베이스 시스템에 비해 획기적으로 빠른 쿼리 속도를 낼 수 있음을 시사한다. "
"또한 여러 노드를 엮어서 클러스터를 구성할 경우 쿼리 처리 속도가 어느 정도 향상되는지도 측정하였다. 쿼리 대상 데이터셋으로서 "
"100GB TPC-H를 사용하였으며 단일 노드(8개 코어)와 6개 노드 클러스터(48개 코어) 간의 성능 차이는 다음과 같았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:38
msgid ""
"모든 쿼리가 linear scalability를 달성하지는 않았으나 상대적으로 단순한 쿼리들의 경우에는 거의 코어 수에 정비례하는 "
"처리 속도 증대를 보여주었다. (SK텔레콤 metatron에서는 더욱 뚜렷한 linear scalability를 달성할 수 있도록 "
"기능을 보강하였다.)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:41
msgid "Ingestion latency 성능"
msgstr ""

#: ../../part01/metatron_engine_test.rst:42
msgid "Druid의 ingestion 성능에 대해서도 평가하였는데, 이때 사용된 클러스터 환경은 다음과 같았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:44
msgid "6개 노드, 총 메모리 360GB 및 96개 코어(12 x Intel® Xeon® E5-2670)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:46
msgid ""
"ingestion 대상으로는 현장에서 실제 사용되는 데이터 소스 8종이었으며 데이터 소스 각각의 특징과 ingestion 결과는 "
"아래와 같았다. 참고로 ingestion 측정을 하는 기간 동안 해당 클러스터에서는 그 외 다른 데이터 소스에 대한 "
"ingestion 동작도 병행해서 실시하였다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:52
msgid ""
"데이터 ingestion 속도는 데이터의 복잡성 등 여러 가지 변수의 영향을 받지만, 측정 결과를 놓고 볼 때 대체로 "
"‘interactivity’라는 Druid의 개발 목표에 부합한다고 할 수 있다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:56
msgid "SK텔레콤의 Druid 성능 평가"
msgstr ""

#: ../../part01/metatron_engine_test.rst:58
msgid "SK텔레콤에서는 다음과 같이 Druid의 query latency와 ingestion latency를 측정하였다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:61
msgid "Query latency 테스트"
msgstr ""

#: ../../part01/metatron_engine_test.rst:62
msgid ""
"Query latency를 측정하는 조건은 다음과 같았다. * 데이터: TPC-H 100G dataset (9억 rows) * "
"Pre-aggregation 기준: day * 서버: r3.4xlarge nodes, (2.5GHz * 16, 122G, 320G "
"SSD) * 6 * Historical 노드 개수: 6개 * Broker 노드 개수: 1개"
msgstr ""

#: ../../part01/metatron_engine_test.rst:69
msgid ""
"그 결과 TPC-H 100G dataset의 5개 쿼리의 반환 속도는 다음과 같았다. (Hive의 쿼리 처리 속도도 참조용으로 함께"
" 측정하였다.)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:75
msgid ""
"Hive의 benchmark가 현저하게 떨어지는 원인 중 일부는 Thrift로 측정한 것과 partition없이 test set이 "
"구성되어 있기 때문임"
msgstr ""

#: ../../part01/metatron_engine_test.rst:78
msgid "Ingestion latency 테스트"
msgstr ""

#: ../../part01/metatron_engine_test.rst:79
msgid "Ingestion latency를 측정하는 조건은 다음과 같았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:81
msgid "Ingestion data size: 1일 30억 rows, 10 columns"
msgstr ""

#: ../../part01/metatron_engine_test.rst:82
msgid "메모리: 512 GB"
msgstr ""

#: ../../part01/metatron_engine_test.rst:83
msgid "CPU: Intel (R) Xeon (R) Gold 5120 CPU @ 2.20 GHz (core 56개)"
msgstr ""

#: ../../part01/metatron_engine_test.rst:84
msgid "Historical 노드 개수: 100개"
msgstr ""

#: ../../part01/metatron_engine_test.rst:85
msgid "Broker 노드 개수: 2개"
msgstr ""

#: ../../part01/metatron_engine_test.rst:86
msgid "총 10개의 middle manager 노드 중 3개에서 job 수행"
msgstr ""

#: ../../part01/metatron_engine_test.rst:87
msgid "Ingestion 도구: Apache Kafka"
msgstr ""

#: ../../part01/metatron_engine_test.rst:89
msgid ""
"이와 같은 조건으로 data ingestion을 100회 수행하였고 평균 ingestion latency는 1.623439초였다. "
"여기서 ingestion latency는 아래 도식화한 것과 같이 Kaka ingestion, Druid ingestion, "
"Druid query 처리에 소요되는 시간을 모두 합산한 것이다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:94
msgid "Druid에 대한 제3자의 평가"
msgstr ""

#: ../../part01/metatron_engine_test.rst:97
msgid "Outlier의 Druid 평가"
msgstr ""

#: ../../part01/metatron_engine_test.rst:98
msgid ""
"다음은 Outlier 블로그에 2016년 8월 26일에 게재된 Top 10 Time Series Databases라는 포스트9에서는"
" 20개의 주요 오픈소스 시계열 데이터베이스 시스템을 평가하였다. 기고자인 Steven Acreman이 개인적으로 매긴 성능 "
"랭킹에서 Druid는 20개 중 9위를 차지하였는데, 여기서 밝힌 Druid의 주요 성능은 다음과 같다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:101
msgid ""
"**1. DB-Engines의 Druid 평가** 온라인 웹사이트 DB Engines10에서는 다양한 데이터베이스 관리 "
"시스템(DBMS)의 시장 인기도를 매달 평가하며, 이때 다음과 같은 지표를 사용한다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:104
msgid "인터넷에서 언급되는 횟수: Google, Bing, Yandex에서의 검색 결과로 측정"
msgstr ""

#: ../../part01/metatron_engine_test.rst:105
msgid "일반적인 관심: Google Trends에서의 검색 빈도를 기준으로 측정"
msgstr ""

#: ../../part01/metatron_engine_test.rst:106
msgid ""
"기술 토론 빈도: 유명 IT 관련 Q&A 사이트인 Stack Overflow 및 DBA Stack Exchange 포스팅 현황을 "
"기준으로 측정"
msgstr ""

#: ../../part01/metatron_engine_test.rst:107
msgid "구인 게시글 수: Indeed 및 Simply Hired의 게시글을 기준으로 측정"
msgstr ""

#: ../../part01/metatron_engine_test.rst:108
msgid "해당 커리어를 지닌 인재의 수: LinkedIn 및 Upwork에 게시된 프로필을 기준으로 측정"
msgstr ""

#: ../../part01/metatron_engine_test.rst:109
msgid "SNS에서의 언급 수: Twitter의 트윗수를 기준으로 측정"
msgstr ""

#: ../../part01/metatron_engine_test.rst:111
msgid ""
"그 결과 Druid는 2018년 7월 기준으로 총 343개 시스템 중에서 118위를 차지하였고, 그 중 시계열 데이터베이스 "
"시스템만을 두고 집계했을 때 총 25개 시스템 중 7위를 차지하였다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:113
msgid ""
"**2. Apache Spark와의 비교** Druid를 Apache Spark와 비교하는 것은 상당히 의미 있는 작업이다. 둘 다"
" 차세대 대용량 데이터 분석 솔루션으로 각광 받고 있으며, 서로 다른 장점을 가지고 있어 매우 상호보완적으로 조합이 가능하기 "
"때문이다. metatron에서도 Druid를 데이터 저장/처리용 엔진으로 사용하고 Spark를 고급 분석용 모듈로 사용함으로써 이들"
" 간의 시너지를 잘 활용하고 있다. 여기서는 Sparkline Data Inc.의 창업자 Harish Butani가 공개한 "
"Druid vs Spark 성능 비교 보고서7-8의 내용을 간단히 소개한다. 보고서에서는 애초에 두 솔루션이 경쟁 관계에 있다기 "
"보다는 상보적인 역할을 한다고 상정을 하고 성능 비교를 시작한다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:118
msgid "Apache Spark의 특징"
msgstr ""

#: ../../part01/metatron_engine_test.rst:118
msgid ""
"Apache Spark는 오픈소스 클러스터 컴퓨팅 프레임워크로서 Java, Scala, Python, R 언어로 이루어진 다양한 "
"API를 제공한다. Spark의 프로그래밍 모델은 SQL, 머신러닝, 그래프 프로세싱을 결합한 분석 솔루션을 구축하는 것이다. "
"Spark는 규모가 크거나 복잡한 데이터를 가공할 수 있도록 강력한 기능들을 지원하지만, Druid와 같은 interactive한 "
"쿼리 처리에 최적화되지는 않았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:126
msgid "데이터셋, 쿼리, 성능 비교 결과"
msgstr ""

#: ../../part01/metatron_engine_test.rst:121
msgid ""
"본 성능 비교를 위한 데이터셋으로 TPCH 10G benchmark data set을 이용했다. 본래 이 데이터셋은 관계형 "
"데이터베이스에 적합한 스타 스키마 구조를 갖기 때문에 이를 역정규화시킨 후 Druid와 Spark에서 처리할 수 있도록 "
"재구성하였다. 이러한 처리를 거친 데이터셋의 크기는 각각 다음과 같았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:123
msgid "TPCH Flat TSV: 46.80GB"
msgstr ""

#: ../../part01/metatron_engine_test.rst:124
msgid "Druid Index in HDFS: 17.04GB"
msgstr ""

#: ../../part01/metatron_engine_test.rst:125
msgid "TPCH Flat Parquet: 11.38GB"
msgstr ""

#: ../../part01/metatron_engine_test.rst:126
msgid "TPCH Flat Parquet Partition by Month: 11.56GB"
msgstr ""

#: ../../part01/metatron_engine_test.rst:128
msgid "그런 다음 두 솔루션의 쿼리 처리 속도를 다각도에서 분석할 수 있는 여러 쿼리를 아래와 같이 구성하였다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:131
msgid "테스트 결과는 다음과 같았다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:133
msgid ""
"Filters + Ship Date 쿼리는 Druid에 특화된 slice-and-dice 성능을 테스트하는 것이었고, 예상대로 무려"
" 50배 이상 속도 상에 우위를 보였다. 마찬가지로 TPCH Q7 쿼리를 처리하는 데도 Druid에서 수 밀리초가 소요된 반면, "
"Spark에서는 수초가 소요되었다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:134
msgid ""
"TPCH Q3, Q5, Q8 쿼리의 경우에는 Druid가 위 경우와 같은 극대화된 효율성을 보여주지 못했다. OrderDate "
"술어는 Druid에서 JavaScript 필터로 번역이 되는데, 이는 네이티브 Java 필터에 비해 현저히 느리기 때문이다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:135
msgid ""
"Basic Aggregation 및 TPCH Q1 쿼리의 경우에도 Druid에서 훨씬 빠른 처리 속도를 보여주었다. Druid에서는"
" Count-Distinct 동작이 cardinality aggregator로 번역이 되는데, 이는 approximate "
"count에 해당한다. 이러한 장점 덕에 Druid는 cardinality가 큰 차원들을 탐색할 때 유리하다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:137
msgid ""
"여러 가지 조건에 따라 결과는 달라질 수 있지만, 한 가지 분명한 것은 시간 파티셔닝(time partitioning) 또는 차원 "
"술어(dimensional predicates)를 포함하는 쿼리는 Druid에서 현저히 빠르게 처리한다는 것이다."
msgstr ""

#: ../../part01/metatron_engine_test.rst:141
msgid "시사점"
msgstr ""

#: ../../part01/metatron_engine_test.rst:143
msgid ""
"이러한 테스트 결과는 Druid의 초고속 쿼리 처리 능력과 Spark의 고급 분석 기능을 결합하면 아주 훌륭한 시너지 효과를 기대할"
" 수 있음을 시사한다. Druid를 통해 신속하고 효율적으로 분석에 필요한 데이터만 추려낸 후 Spark의 풍부한 프로그래밍 "
"API들을 활용하여 심층적인 분석을 실시하는 것이다. 이렇게 함으로써 강력하고 유연하며 쿼리 latency가 매우 낮은 분석 "
"솔루션을 구축할 수 있다."
msgstr ""

#: ../../part01/overview.rst:2 ../../part01/overview.rst:35
msgid "메타트론 디스커버리 개요"
msgstr ""

#: ../../part01/overview.rst:3
msgid ""
"메타트론 디스커버리는 메타트론 운용 서버 클러스터에 적재된 데이터를 단순하면서도 고도화된 방식으로 분석한 후 그 결과를 다양한 "
"형식의 차트와 보고서로 사용자 PC에 출력해줍니다. 웹 템플릿 형식으로 구성되어 있으며 계정이 발급되면 아무 PC 에서나 원격으로 "
"접속할 수 있기 때문에 매우 편리한 접근성을 보장합니다."
msgstr ""

#: ../../part01/overview.rst:7
msgid "OLAP BI"
msgstr ""

#: ../../part01/overview.rst:9
msgid ""
"메타트론 디스커버리는 빅데이터로부터 쉽고 빠르게 Insight 를 찾게 해주는 4 세대 OLAP BI 솔루션입니다. 아래 그림은 1"
" 세대부터 4 세대까지의 BI 의 흐름을 나타낸 그림입니다."
msgstr ""

#: ../../part01/overview.rst:15
msgid "현재 시장은 2 세대, 3 세대 제품이 주류를 이루고 있으며, 4 세대 제품이 주목받고 있습니다."
msgstr ""

#: ../../part01/overview.rst:18
msgid "BIG OLAP 정의"
msgstr ""

#: ../../part01/overview.rst:20
msgid ""
"metatron Discovery 는 대용량 Fact 데이터를 기준으로 다양한 Dimension 데이터를 결합하여 하나의 Big "
"OLAP Cube(Mart) 생성할 수 있습니다."
msgstr ""

#: ../../part01/overview.rst:27
msgid "Big OLAP Cube로 사용 시, 다음과 같은 장점이 있습니다."
msgstr ""

#: ../../part01/overview.rst:29
msgid ""
"ETL 비용 최소화 Mart 의 생성을 최소화 함에 따라 Mart 생성을 위한 ETL 비용 감소 Mart 데이터 수가 적어짐에 "
"따라, 구조 변경에 따른 영향도를 최소화 할 수 있음 Fact 데이터를 모두 저장하므로, 다양한 요구사항에 대응 가능"
msgstr ""

#: ../../part01/overview.rst:30
msgid ""
"빠른 속도 및 스키마 변경 수용 분산 아키텍처 기반으로 큰 규모의 데이터도 저장 가능하며, 빠른 속도로 결과 출력 가능 "
"Dynamic 스키마 채용으로 스키마 변경 시에도 별도의 스키마 재정의가 필요치 않음"
msgstr ""

#: ../../part01/overview.rst:31
msgid "실시간 처리 테이블을 원본 그대로 저장하므로 레코드 단위의 실시간 처리 가능"
msgstr ""

#: ../../part01/overview.rst:37
msgid ""
"metatron Discovery는 OLAP, 시각화, 머신러닝 기술이 융합하여 비전문가도 데이터로부터 상위 레벨의 가치를 빠르고 "
"손쉽게 얻을 수 있는 Intelligence 솔루션입니다."
msgstr ""

#: ../../part01/overview.rst:44
msgid ""
"metatron Discovery는 대용량 데이터에 대한 Preparation부터 시각화 기반 데이터 탐색, 고급분석까지 End-"
"to-end로 지원하는 Single Solution for Data Discovery를 위해 솔루션입니다. 아래 그림은 "
"metatron의 architecture와 주요 feature가 정의되어 있습니다."
msgstr ""

#: ../../part01/structure.rst:2
msgid "메타트론 디스커버리 구성"
msgstr ""

#: ../../part01/structure.rst:4
msgid ""
"Metatron Discovery는 metatron 운용 서버에 적재된 데이터 소스나 그 밖의 외부 데이터 소스로부터 원하는 "
"데이터를 불러와서 각종 고급 분석 기능을 통해 분석한 후, 그 결과를 다양한 형식의 차트와 보고서로 출력하는 기능을 합니다. 본 "
"모듈을 이용하려면 다음과 같은 전반적인 구조를 이해해야 합니다."
msgstr ""

#: ../../part01/structure.rst:14
msgid "데이터 프리퍼레이션"
msgstr ""

#: ../../part01/structure.rst:15
msgid ""
"데이터 프리퍼레이션은 원천 데이터에서부터 데이터를 정제 및 가공하여 메타트론으로 적재하는 기능을 제공합니다. 데이터 프리퍼레이션에 "
"대한 자세한 설명은 :doc:`../part07/data_preparation_overview` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:20
msgid "데이터 스토리지"
msgstr ""

#: ../../part01/structure.rst:21
msgid ""
"데이터 스토리지는 메타트론 내에서 사용될 메타트론 엔진에 적재된 데이터를 관리합니다. 데이터 관리 기능에 대한 자세한 설명은 "
":doc:`../part02/data_management_overview` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:26
msgid "데이터 분석 및 시각화"
msgstr ""

#: ../../part01/structure.rst:27
msgid "사용자가 데이터 스토리지에 저장한 데이터로 시각화 기반 탐색, 분석하는 기능을 제공합니다."
msgstr ""

#: ../../part01/structure.rst:30
msgid "워크스페이스"
msgstr ""

#: ../../part01/structure.rst:31
msgid ""
"워크스페이스는 조직 내에서 사용할 워크북, 워크벤치, 노트북을 권한에 따라 관리할 수 있습니다. 워크스페이스 기능에 대한 자세한 "
"설명은 :doc:`../part03/workspace_overview` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:34
msgid "워크북, 대시보드 그리고 차트"
msgstr ""

#: ../../part01/structure.rst:35
msgid ""
"워크북은 대시보드와 차트를 PPT 처럼 작업하고 한 워크북안에서 여러 대시보드를 보고 프리젠테이션 하는 방식입니다. 워크북 기능에 "
"대한 자세한 설명은 :doc:`../part04/workbook_overview` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:38
msgid "노트북"
msgstr ""

#: ../../part01/structure.rst:39
msgid ""
"Machine Learning 기반 고급 분석을 수행할 수 있습니다. 노트북 기능에 대한 자세한 설명은 "
":doc:`../part05/notebook_overview` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:42
msgid "워크벤치"
msgstr ""

#: ../../part01/structure.rst:43
msgid ""
"SQL 기반 분석을 수행할 수 있습니다. 기능에 대한 자세한 설명은 "
":doc:`../part06/06_01-workbench_overview` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:48
msgid "데이터 모니터링"
msgstr ""

#: ../../part01/structure.rst:49
msgid ""
"데이터 쿼리 통계, 쿼리 로그 감사를 통해 데이터 사용에 대한 모니터링 기능을 제공합니다. 데이터 모니터링 기능에 대한 자세한 "
"설명은 :doc:`../part02/data_monitoring` 를 참조하세요."
msgstr ""

#: ../../part01/structure.rst:54
msgid "사용자 권한 및 계정"
msgstr ""

#: ../../part01/structure.rst:55
msgid "사용자를 추가, 삭제하거나 사용자의 권한을 관리합니다."
msgstr ""

